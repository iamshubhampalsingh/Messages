###################################################Testcase63###################################################################
# Connect to the devices
receiver_device_serial = "192.168.2.92:5555"
receiver_device = ui2.Device(receiver_device_serial)
# Define the device's serial number or URL
sender_device_serial = 'cf611ff9'

# Create a Device object
sender_device = ui2.Device(sender_device_serial)

# ADB commands to turn on the receiver and sender devices' screens
receiver_turn_on_command = ['adb', '-s', receiver_device_serial, 'shell', 'input', 'keyevent', '224']
sender_turn_on_command = ['adb', '-s', 'cf611ff9', 'shell', 'input', 'keyevent', '224']

# ADB commands to turn off the receiver and sender devices' screens
receiver_turn_off_command = ['adb', '-s', receiver_device_serial, 'shell', 'input', 'keyevent', '26']
sender_turn_off_command = ['adb', '-s', 'cf611ff9', 'shell', 'input', 'keyevent', '26']

# Compose and send messages from the sender device
sender_device(text="Messages").click()
time.sleep(2)
sender_device(text="AAAAA").click()


num_runs = 10
for run in range(num_runs):
    sender_device(resourceId="com.google.android.apps.messaging:id/compose_message_text").set_text("hello")
    time.sleep(2)
    sender_device(resourceId="com.google.android.apps.messaging:id/send_message_button_container").click()
    time.sleep(2)

# Send messages from the receiver device to the sender device
receiver_device(text="Messages").click()
time.sleep(2)
receiver_device(text="Shubham").click()
time.sleep(2)

num_runs = 10
for run in range(num_runs):
    receiver_device(resourceId="com.google.android.apps.messaging:id/compose_message_text").set_text("hello")
    time.sleep(2)
    receiver_device(resourceId="com.google.android.apps.messaging:id/send_message_button_container").click()
    time.sleep(2)
print("Test case MSG_63 is pass")
time.sleep(2)
receiver_device(resourceId="com.android.systemui:id/back").click()
time.sleep(2)
receiver_device(resourceId="com.android.systemui:id/back").click()
time.sleep(2)
sender_device(resourceId="com.android.systemui:id/back").click()
time.sleep(2)
sender_device(resourceId="com.android.systemui:id/back").click()


################################################Testcase72#####################################################################

# Define the device's serial number or URL
sender_device_serial = 'cf611ff9'

# Create a Device object
sender_device = ui2.Device(sender_device_serial)

receiver_device(resourceId="com.android.systemui:id/center_group").click()
time.sleep(2)

# Compose the message
receiver_device(text="Messages").click()
time.sleep(2)
receiver_device(text="AAAAA").click()


num_runs = 10
for run in range(num_runs):
    receiver_device(resourceId="com.google.android.apps.messaging:id/compose_message_text").set_text("hello")
    time.sleep(2)
    receiver_device(resourceId="com.google.android.apps.messaging:id/send_message_button_container").click()
    time.sleep(2)
    
# Execute a shell command to get some output
command = "adb shell input keyevent 26"
result = subprocess.run(command, shell=True, capture_output=True, text=True)
    
# Check the sleep state in the output
output_lines = result.stdout.split('\n')
sleep_state = None
for line in output_lines:
    if "mWakefulness=" in line:
        sleep_state = line.split('=')[1]
        break

# Check the sleep state value and determine if the device is in deep sleep
if sleep_state == "Dozing" or sleep_state == "DeepSleep":
    print("Receiver device is in deep sleep mode.")
else:
    print("Receiver device is not in deep sleep mode.")
print("Test case 72 pass")
receiver_device(resourceId="com.android.systemui:id/back").click()
time.sleep(2)
receiver_device(resourceId="com.android.systemui:id/back").click()
print("Test case MSG_72 pass")
#############################################Testcase76############################################################################

# Define the device's serial number or URL
sender_device_serial = 'cf611ff9'

# Create a Device object
sender_device = ui2.Device(sender_device_serial)

# ADB command to retrieve power information
adb_command = ['adb', '-s', receiver_device_serial, 'shell', 'dumpsys', 'power']

receiver_device(resourceId="com.android.systemui:id/center_group").click()
time.sleep(2)

# Compose the message
receiver_device(text="Messages").click()
time.sleep(2)
receiver_device(text="AAAAA").click()


num_runs = 10
for run in range(num_runs):
    receiver_device(resourceId="com.google.android.apps.messaging:id/compose_message_text").set_text("hello")
    time.sleep(2)
    receiver_device(resourceId="com.google.android.apps.messaging:id/send_message_button_container").click()
    time.sleep(2)
    
# Execute a shell command to get some output
command = "adb shell input keyevent 26"
result = subprocess.run(command, shell=True, capture_output=True, text=True)

# Check the sleep state in the output
output_lines = result.stdout.split('\n')
sleep_state = None
for line in output_lines:
    if "mWakefulness=" in line:
        sleep_state = line.split('=')[1]
        break

# Check the sleep state value and determine if the device is in deep sleep
if sleep_state == "Dozing" or sleep_state == "DeepSleep":
    print("Receiver device is in deep sleep mode.")
else:
    print("Receiver device is not in deep sleep mode.")
time.sleep(2)
receiver_device(resourceId="com.android.systemui:id/back").click()
time.sleep(2)
if receiver_device(text="AAAAA").exists():
 print("recipient contacts are shown")
else:
 print("recipient contacts are not shown")
time.sleep(2)
receiver_device(resourceId="com.android.systemui:id/back").click()
time.sleep(2)
receiver_device(resourceId="com.android.systemui:id/back").click()
print("Test case MSG_72 pass")

###################################################Testcase77#################################################################
# Define the device's serial number or URL
sender_device_serial = 'cf611ff9'

# Create a Device object
sender_device = ui2.Device(sender_device_serial)

# ADB command to retrieve power information
adb_command = ['adb', '-s', receiver_device_serial, 'shell', 'dumpsys', 'power']

receiver_device(scrollable=True).scroll.toEnd(20)
time.sleep(2)
receiver_device(scrollable=True).scroll.toEnd(10)
time.sleep(2)
receiver_device(resourceId="com.android.launcher3:id/icon", text="YouTube").click()
time.sleep(4)
receiver_device(resourceId="com.google.android.youtube:id/menu_item_1").click()
time.sleep(2)
receiver_device(text="Search YouTube").set_text("LAVA V5 - First impressions")
time.sleep(5)
receiver_device(scrollable=True).scroll.toEnd(0)
time.sleep(10)
receiver_device.click(500,300)
time.sleep(10)
#receiver_device(resourceId="com.google.android.youtube:id/watch_player").click()
time.sleep(25)
receiver_device(resourceId="com.android.systemui:id/center_group").click()

# Compose the message
receiver_device(text="Messages").click()
time.sleep(2)
receiver_device(text="AAAAA").click()
time.sleep(2)


num_runs = 10
for run in range(num_runs):
    receiver_device(resourceId="com.google.android.apps.messaging:id/compose_message_text").set_text("hello")
    time.sleep(2)
    receiver_device(resourceId="com.google.android.apps.messaging:id/send_message_button_container").click()
    time.sleep(2)
receiver_device(resourceId="com.android.systemui:id/center_group").click()

# Execute the ADB command and capture the output
result = subprocess.run(adb_command, capture_output=True, text=True)

# Check the sleep state in the output
output_lines = result.stdout.split('\n')
sleep_state = None
for line in output_lines:
    if "mWakefulness=" in line:
        sleep_state = line.split('=')[1]
        break

# Check the sleep state value and determine if the device is in deep sleep
if sleep_state == "Dozing" or sleep_state == "DeepSleep":
    print("Receiver device is in deep sleep mode.")
else:
    print("Receiver device is not in deep sleep mode.")
time.sleep(2)
receiver_device(resourceId="com.android.systemui:id/back").click()
time.sleep(2)
receiver_device(resourceId="com.android.systemui:id/back").click()
time.sleep(2)
if receiver_device(text="AAAAA").exists():
 print("recipient contacts are shown")
else:
 print("recipient contacts are not shown")
receiver_device(resourceId="com.android.systemui:id/back").click()
time.sleep(2)
receiver_device(resourceId="com.android.systemui:id/center_group").click()
print("Test case MSG_77 pass")
##################################################Testcase78#################################################################### Compose the message
sender_device(text="Messages").click()
time.sleep(2)
sender_device(text="AAAAA").click()
time.sleep(2)
num_runs = 10
for run in range(num_runs):
    sender_device(resourceId="com.google.android.apps.messaging:id/compose_message_text").set_text("hello")
    time.sleep(2)
    sender_device(resourceId="com.google.android.apps.messaging:id/send_message_button_container").click()
    time.sleep(2)
sender_device(resourceId="com.android.systemui:id/center_group").click()
print("Test case MSG_78 is pass")
##################################################Testcase 81#################################################################

# Define the device's serial number or URL
sender_device_serial = 'cf611ff9'

# Create a Device object
sender_device = ui2.Device(sender_device_serial)
receiver_device(resourceId="com.android.systemui:id/center_group").click()
# Compose the message
receiver_device(text="Messages").click()
time.sleep(2)
receiver_device(text="Shubham").click()
time.sleep(2)
receiver_device(resourceId="com.google.android.apps.messaging:id/compose_message_text").click()
time.sleep(2)
receiver_device.xpath('//*[@resource-id="com.google.android.inputmethod.latin:id/key_pos_1_1"]/android.widget.TextView[1]').click()
time.sleep(2)
receiver_device.xpath('//*[@resource-id="com.google.android.inputmethod.latin:id/key_pos_1_5"]/android.widget.TextView[1]').click()
time.sleep(2)
receiver_device.xpath('//*[@resource-id="com.google.android.inputmethod.latin:id/key_pos_0_6"]/android.widget.TextView[1]').click()
time.sleep(2)
receiver_device.xpath('//*[@resource-id="com.google.android.inputmethod.latin:id/key_pos_2_5"]/android.widget.TextView[1]').click()
time.sleep(2)
receiver_device.xpath('//*[@resource-id="com.google.android.inputmethod.latin:id/key_pos_1_5"]/android.widget.TextView[1]').click()
time.sleep(2)
receiver_device.xpath('//*[@resource-id="com.google.android.inputmethod.latin:id/key_pos_2_7"]/android.widget.TextView[1]').click()
time.sleep(2)
receiver_device(resourceId="com.google.android.apps.messaging:id/send_message_button_container").click()
time.sleep(2)
receiver_device(resourceId="com.google.android.inputmethod.latin:id/key_pos_switch_to_next_language").click()
time.sleep(2)
receiver_device(resourceId="com.google.android.inputmethod.latin:id/key_pos_switch_to_next_language").click()
time.sleep(2)
receiver_device.xpath('//android.widget.ListView/android.widget.LinearLayout[3]/android.widget.LinearLayout[1]/android.widget.TextView[1]').click()
time.sleep(2)
receiver_device.xpath('//*[@resource-id="com.google.android.inputmethod.latin:id/key_pos_1_0"]/android.widget.TextView[1]').click()
time.sleep(2)
if receiver_device(resourceId="com.google.android.apps.messaging:id/compose_message_text", text="क").exists():
    print("Tpying Language changed")
else:
    print("Typing language not changed")
receiver_device.xpath('//*[@resource-id="com.google.android.inputmethod.latin:id/key_pos_del"]/android.widget.ImageView[1]').click()
time.sleep(2)
receiver_device(resourceId="com.google.android.inputmethod.latin:id/key_pos_switch_to_next_language").click()
time.sleep(2)
receiver_device(resourceId="com.android.systemui:id/back").click()
time.sleep(2)
receiver_device(resourceId="com.android.systemui:id/back").click()
time.sleep(2)
receiver_device(resourceId="com.android.systemui:id/back").click()
time.sleep(2)
print("Test case MSG_81 pass")
#########################################################Testcase82############################################################

import uiautomator2 as ui2
import time
import subprocess
import os
from datetime import datetime, timedelta


# ADB command to retrieve battery information
adb_command = ['adb', '-s', receiver_device_serial, 'shell', 'dumpsys', 'battery']

# Execute the ADB command and capture the output
result = subprocess.run(adb_command, capture_output=True, text=True)
# Define the device's serial number or URL
sender_device_serial = 'cf611ff9'

# Create a Device object
sender_device = ui2.Device(sender_device_serial)

# ADB commands to turn on the receiver and sender devices' screens
receiver_turn_on_command = ['adb', '-s', receiver_device_serial, 'shell', 'input', 'keyevent', '224']
sender_turn_on_command = ['adb', '-s', 'cf611ff9', 'shell', 'input', 'keyevent', '224']

# ADB commands to turn off the receiver and sender devices' screens
receiver_turn_off_command = ['adb', '-s', receiver_device_serial, 'shell', 'input', 'keyevent', '26']
sender_turn_off_command = ['adb', '-s', 'cf611ff9', 'shell', 'input', 'keyevent', '26']

# Compose the message
reciever_device(text="Messages").click()
time.sleep(2)
reciever_device(text="AAAAA").click()
time.sleep(2)

num_runs = 10
for run in range(num_runs):
    reciever_device(resourceId="com.google.android.apps.messaging:id/compose_message_text").set_text("hello")
    time.sleep(2)
    reciever_device(resourceId="com.google.android.apps.messaging:id/send_message_button_container").click()
    time.sleep(5)
reciever_device(resourceId="com.android.systemui:id/center_group").click()
time.sleep(2)
receiver_device(text="Phone").click()
time.sleep(2)
receiver_device(resourceId="com.google.android.dialer:id/dialpad_fab").click()
time.sleep(2)
receiver_device(text='8').click()
receiver_device(text='5').click()
receiver_device(text='2').click()
receiver_device(text='7').click()
receiver_device(text='7').click()
receiver_device(text='4').click()
receiver_device(text='6').click()
receiver_device(text='8').click()
receiver_device(text='9').click()
receiver_device(text='7').click()
time.sleep(2)

# Compose the message
receiver_device(text="Messages").click()
time.sleep(2)
receiver_device(text="Start chat").click()
time.sleep(2)
receiver_device(text="AAAAA").click()


num_runs = 10
for run in range(num_runs):
    receiver_device(resourceId="com.google.android.apps.messaging:id/compose_message_text").set_text("hello")
    time.sleep(2)
    receiver_device(resourceId="com.google.android.apps.messaging:id/send_message_button_container").click()
    time.sleep(5)
receiver_device(resourceId="com.android.systemui:id/back").click()
time.sleep(2)
receiver_device(resourceId="com.android.systemui:id/back").click()
time.sleep(2)
receiver_device(resourceId="com.android.systemui:id/center_group").click()
print("Test case MSG_82 is pass")

#########################################################Testcase83############################################################

# Define the device's serial number or URL
sender_device_serial = 'cf611ff9'

# Create a Device object
sender_device = ui2.Device(sender_device_serial)
# ADB command to retrieve battery information
adb_command = ['adb', '-s', receiver_device_serial, 'shell', 'dumpsys', 'battery']

# Execute the ADB command and capture the output
result = subprocess.run(adb_command, capture_output=True, text=True)

# Create a Device object for the sender device
sender_device = ui2.Device('cf611ff9')

# Create a Device object for the receiver device
receiver_device = ui2.Device(receiver_device_serial)


# ADB commands to turn on the receiver and sender devices' screens
receiver_turn_on_command = ['adb', '-s', receiver_device_serial, 'shell', 'input', 'keyevent', '224']
sender_turn_on_command = ['adb', '-s', 'cf611ff9', 'shell', 'input', 'keyevent', '224']

# ADB commands to turn off the receiver and sender devices' screens
receiver_turn_off_command = ['adb', '-s', receiver_device_serial, 'shell', 'input', 'keyevent', '26']
sender_turn_off_command = ['adb', '-s', 'cf611ff9', 'shell', 'input', 'keyevent', '26']

# Compose the message
receiver_device(text="Messages").click()
time.sleep(2)
receiver_device(text="Start chat").click()
time.sleep(2)
receiver_device(text="AAAAA").click()
time.sleep(2)

num_runs = 10
for run in range(num_runs):
    receiver_device(resourceId="com.google.android.apps.messaging:id/compose_message_text").set_text("hello")
    time.sleep(2)
    receiver_device(resourceId="com.google.android.apps.messaging:id/send_message_button_container").click()
    time.sleep(5)
receiver_device(resourceId="com.android.systemui:id/center_group").click()
time.sleep(2)
receiver_device(text="Phone").click()
time.sleep(2)
receiver_device(resourceId="com.google.android.dialer:id/dialpad_fab").click()
time.sleep(2)
receiver_device(text='8').click()
receiver_device(text='5').click()
receiver_device(text='2').click()
receiver_device(text='7').click()
receiver_device(text='7').click()
receiver_device(text='4').click()
receiver_device(text='6').click()
receiver_device(text='8').click()
receiver_device(text='9').click()
receiver_device(text='7').click()
time.sleep(60)
receiver_device(resourceId="com.android.systemui:id/center_group").click()
time.sleep(2)
# Compose the message
receiver_device(text="Messages").click()
time.sleep(2)
reciever_device(text="Start chat").click()
time.sleep(2)
reciever_device(text="AAAAA").click()
time.sleep(2)

num_runs = 10
for run in range(num_runs):
    receiver_device(resourceId="com.google.android.apps.messaging:id/compose_message_text").set_text("hello")
    time.sleep(2)
    receiver_device(resourceId="com.google.android.apps.messaging:id/send_message_button_container").click()
    time.sleep(5)
receiver_device(resourceId="com.android.systemui:id/ongoing_call_chip").click()
time.sleep(2)
receiver_device(resourceId="com.google.android.dialer:id/incall_end_call").click()
time.sleep(2)
receiver_device(text="Messages").click()
time.sleep(2)
receiver_device(resourceId="com.android.systemui:id/back").click()
time.sleep(2)
receiver_device(resourceId="com.android.systemui:id/back").click()
time.sleep(2)
reciever_device(resourceId="com.android.systemui:id/center_group").click()
time.sleep(2)
print("Test case MSG_83 pass")
###################################################Testcase84########################################################################

# Define the device's serial number or URL
sender_device_serial = 'cf611ff9'

# Create a Device object
sender_device = ui2.Device(sender_device_serial)

# ADB command to retrieve battery information
adb_command = ['adb', '-s', receiver_device_serial, 'shell', 'dumpsys', 'battery']

# Execute the ADB command and capture the output
result = subprocess.run(adb_command, capture_output=True, text=True)

# Create a Device object for the receiver device
receiver_device = ui2.Device(receiver_device_serial)


# ADB commands to turn on the receiver and sender devices' screens
receiver_turn_on_command = ['adb', '-s', receiver_device_serial, 'shell', 'input', 'keyevent', '224']
sender_turn_on_command = ['adb', '-s', 'cf611ff9', 'shell', 'input', 'keyevent', '224']

# ADB commands to turn off the receiver and sender devices' screens
receiver_turn_off_command = ['adb', '-s', receiver_device_serial, 'shell', 'input', 'keyevent', '26']
sender_turn_off_command = ['adb', '-s', 'cf611ff9', 'shell', 'input', 'keyevent', '26']

# Compose the message
sender_device(text="Messages").click()
time.sleep(2)
sender_device(text="Start chat").click()
time.sleep(2)
sender_device(text="AAAAA").click()
time.sleep(2)

num_runs = 10
for run in range(num_runs):
    sender_device(resourceId="com.google.android.apps.messaging:id/compose_message_text").set_text("hello")
    time.sleep(2)
    sender_device(resourceId="com.google.android.apps.messaging:id/send_message_button_container").click()
    time.sleep(5)
receiver_device(resourceId="com.android.systemui:id/center_group").click()
time.sleep(2)
receiver_device(text="Phone").click()
time.sleep(2)
receiver_device(resourceId="com.google.android.dialer:id/dialpad_fab").click()
time.sleep(2)
receiver_device(text='8').click()
receiver_device(text='5').click()
receiver_device(text='2').click()
receiver_device(text='7').click()
receiver_device(text='7').click()
receiver_device(text='4').click()
receiver_device(text='6').click()
receiver_device(text='8').click()
receiver_device(text='9').click()
receiver_device(text='7').click()
time.sleep(60)
receiver_device(resourceId="com.google.android.dialer:id/dialpad_voice_call_button").click()
time.sleep(2)
receiver_device(resourceId="com.android.systemui:id/center_group").click()
time.sleep(2)
# Compose the message
receiver_device(text="Messages").click()
time.sleep(2)
receiver_device(text="Start chat").click()
time.sleep(2)
receiver_device(text="AAAAA").click()
time.sleep(2)
num_runs = 10
for run in range(num_runs):
    receiver_device(resourceId="com.google.android.apps.messaging:id/compose_message_text").set_text("hello")
    time.sleep(2)
    receiver_device(resourceId="com.google.android.apps.messaging:id/send_message_button_container").click()
    time.sleep(5)
receiver_device(resourceId="com.android.systemui:id/ongoing_call_chip").click()
time.sleep(2)
receiver_device(resourceId="com.google.android.dialer:id/incall_end_call").click()
time.sleep(2)
receiver_device(resourceId="com.android.systemui:id/back").click()
time.sleep(2)
sender_device(resourceId="com.android.systemui:id/back").click()
time.sleep(2)
sender_device(resourceId="com.android.systemui:id/center_group").click()
time.sleep(2)
print("Test case MSG_84 pass")
#############################################Testcase85#####################################################################

# Define the device's serial number or URL
sender_device_serial = 'cf611ff9'

# Create a Device object
sender_device = ui2.Device(sender_device_serial)

# ADB command to retrieve battery information
adb_command = ['adb', '-s', receiver_device_serial, 'shell', 'dumpsys', 'battery']

# Execute the ADB command and capture the output
result = subprocess.run(adb_command, capture_output=True, text=True)

# Create a Device object for the sender device
sender_device = ui2.Device('cf611ff9')

# Create a Device object for the receiver device
receiver_device = ui2.Device(receiver_device_serial)


# ADB commands to turn on the receiver and sender devices' screens
receiver_turn_on_command = ['adb', '-s', receiver_device_serial, 'shell', 'input', 'keyevent', '224']
sender_turn_on_command = ['adb', '-s', 'cf611ff9', 'shell', 'input', 'keyevent', '224']

# ADB commands to turn off the receiver and sender devices' screens
receiver_turn_off_command = ['adb', '-s', receiver_device_serial, 'shell', 'input', 'keyevent', '26']
sender_turn_off_command = ['adb', '-s', 'cf611ff9', 'shell', 'input', 'keyevent', '26']

# Compose the message
reciever_device(text="Messages").click()
time.sleep(2)
reciever_device(text="AAAAA").click()

num_runs = 10
for run in range(num_runs):
    reciever_device(resourceId="com.google.android.apps.messaging:id/compose_message_text").set_text("hello")
    time.sleep(2)
    reciever_device(resourceId="com.google.android.apps.messaging:id/send_message_button_container").click()
    time.sleep(5)
receiver_device(text="Phone").click()
time.sleep(2)
receiver_device(resourceId="com.google.android.dialer:id/dialpad_fab").click()
time.sleep(2)
reciever_device(text='8').click()
reciever_device(text='5').click()
reciever_device(text='2').click()
reciever_device(text='7').click()
reciever_device(text='7').click()
reciever_device(text='4').click()
reciever_device(text='6').click()
reciever_device(text='8').click()
reciever_device(text='9').click()
reciever_device(text='7').click()
time.sleep(60)
reciever_device(resourceId="com.android.dialer:id/dialpad_floating_action_button").click()
time.sleep(2)
reciever_device(resourceId="com.android.systemui:id/center_group").click()
# Compose the message
reciever_device(text="Messages").click()
time.sleep(2)
reciever_device(text="Start chat").click()
time.sleep(2)
reciever_device(text="AAAAA").click()
time.sleep(2)
num_runs = 10
for run in range(num_runs):
    reciever_device(resourceId="com.google.android.apps.messaging:id/compose_message_text").set_text("hello")
    time.sleep(2)
    reciever_device(resourceId="com.google.android.apps.messaging:id/send_message_button_container").click()
    time.sleep(5)
reciever_device(resourceId="com.android.systemui:id/back").click()
time.sleep(2)
reciever_device(resourceId="com.android.systemui:id/back").click()
time.sleep(2)
reciever_device(resourceId="com.android.systemui:id/center_group").click()
time.sleep(2)
print("Test case MSG_85 pass")
##################################################TestCase86####################################################################

# Create a Device object
sender_device = ui2.Device(sender_device_serial)

# ADB command to retrieve battery information
adb_command = ['adb', '-s', receiver_device_serial, 'shell', 'dumpsys', 'battery']

# Execute the ADB command and capture the output
result = subprocess.run(adb_command, capture_output=True, text=True)

# Create a Device object for the sender device
sender_device = ui2.Device('cf611ff9')

# Create a Device object for the receiver device
receiver_device = ui2.Device(receiver_device_serial)


# ADB commands to turn on the receiver and sender devices' screens
receiver_turn_on_command = ['adb', '-s', receiver_device_serial, 'shell', 'input', 'keyevent', '224']
sender_turn_on_command = ['adb', '-s', 'cf611ff9', 'shell', 'input', 'keyevent', '224']

# ADB commands to turn off the receiver and sender devices' screens
receiver_turn_off_command = ['adb', '-s', receiver_device_serial, 'shell', 'input', 'keyevent', '26']
sender_turn_off_command = ['adb', '-s', 'cf611ff9', 'shell', 'input', 'keyevent', '26']

# Compose the message
receiver_device(text="Messages").click()
time.sleep(2)
receiver_device(text="Start chat").click()
time.sleep(2)
receiver_device(text="Shubham").click()


num_runs = 10
for run in range(num_runs):
    receiver_device(resourceId="com.google.android.apps.messaging:id/compose_message_text").set_text("hello")
    time.sleep(2)
    receiver_device(resourceId="com.google.android.apps.messaging:id/send_message_button_container").click()
    time.sleep(5)
receiver_device(resourceId="com.android.systemui:id/back").click()
time.sleep(2)
receiver_device(resourceId="com.android.systemui:id/back").click()
time.sleep(2)
receiver_device(resourceId="com.android.systemui:id/center_group").click()
time.sleep(2)
print("Test case MSG_86 pass")

###################################################Testcase87#####################################################################

# Define the device's serial number or URL
sender_device_serial = 'cf611ff9'

# Create a Device object
sender_device = ui2.Device(sender_device_serial)

# Create a Device object for the receiver device
receiver_device = ui2.Device(receiver_device_serial)

# Create a Device object for the sender device
sender_device = ui2.Device('cf611ff9')

# ADB commands to turn on the receiver and sender devices' screens
receiver_turn_on_command = ['adb', '-s', receiver_device_serial, 'shell', 'input', 'keyevent', '224']
sender_turn_on_command = ['adb', '-s', 'cf611ff9', 'shell', 'input', 'keyevent', '224']

# ADB commands to turn off the receiver and sender devices' screens
receiver_turn_off_command = ['adb', '-s', receiver_device_serial, 'shell', 'input', 'keyevent', '26']
sender_turn_off_command = ['adb', '-s', 'cf611ff9', 'shell', 'input', 'keyevent', '26']

# Compose the message
sender_device(text="Messages").click()
time.sleep(2)
sender_device(text="Start chat").click()
time.sleep(2)
sender_device(text="Shubham").click()
time.sleep(2)
sender_device("com.google.android.apps.messaging:id/action_call").click()
time.sleep(5)
# Function to capture a screenshot
def capture_screenshot():
    screenshot = receiver_device.screenshot(format="opencv")
    return screenshot

# Function to check for a red screen
def is_red_screen():
    screenshot = capture_screenshot()
    hsv = cv2.cvtColor(screenshot, cv2.COLOR_BGR2HSV)
    lower_red = np.array([0, 100, 100])
    upper_red = np.array([10, 255, 255])
    mask1 = cv2.inRange(hsv, lower_red, upper_red)
    lower_red = np.array([160, 100, 100])
    upper_red = np.array([179, 255, 255])
    mask2 = cv2.inRange(hsv, lower_red, upper_red)
    red_mask = mask1 + mask2
    red_pixels = cv2.countNonZero(red_mask)
    total_pixels = screenshot.shape[0] * screenshot.shape[1]
    red_ratio = red_pixels / total_pixels
    return red_ratio > 0.01  # Adjust the threshold as needed

# Function to check for a black screen
def is_black_screen():
    screenshot = capture_screenshot()
    gray = cv2.cvtColor(screenshot, cv2.COLOR_BGR2GRAY)
    black_pixels = cv2.countNonZero(gray == 0)
    total_pixels = screenshot.shape[0] * screenshot.shape[1]
    black_ratio = black_pixels / total_pixels
    return black_ratio > 0.95  # Adjust the threshold as needed

# Function to check for lag
def has_lag():
    start_time = time.time()
    # Perform actions on the device
    end_time = time.time()
    elapsed_time = end_time - start_time
    return elapsed_time > 5.0  # Adjust the threshold as needed
time.sleep(2)
receiver_device(resourceId="com.google.android.dialer:id/incall_end_call").click()
time.sleep(2)
reciever_device(resourceId="com.android.systemui:id/back").click()
time.sleep(2)
reciever_device(resourceId="com.android.systemui:id/center_group").click()
# Check for red screen, black screen, and lag
if is_red_screen():
    print("Red screen detected on the receiver device!")
elif is_black_screen():
    print("Black screen detected on the receiver device!")
elif has_lag():
    print("Lag detected on the receiver device!")
else:
    print("No issues detected.")
print("Test case MSG_87 pass")

##################################################Testcase 88#####################################################################

# ADB command to retrieve battery information
adb_command = ['adb', '-s', receiver_device_serial, 'shell', 'dumpsys', 'battery']

# Execute the ADB command and capture the output
result = subprocess.run(adb_command, capture_output=True, text=True)

# Create a Device object for the sender device
sender_device = ui2.Device('cf611ff9')

# Create a Device object for the receiver device
receiver_device = ui2.Device(receiver_device_serial)


# ADB commands to turn on the receiver and sender devices' screens
receiver_turn_on_command = ['adb', '-s', receiver_device_serial, 'shell', 'input', 'keyevent', '224']
sender_turn_on_command = ['adb', '-s', 'cf611ff9', 'shell', 'input', 'keyevent', '224']

# ADB commands to turn off the receiver and sender devices' screens
receiver_turn_off_command = ['adb', '-s', receiver_device_serial, 'shell', 'input', 'keyevent', '26']
sender_turn_off_command = ['adb', '-s', 'cf611ff9', 'shell', 'input', 'keyevent', '26']

# Compose the message
receiver_device(text="Messages").click()
time.sleep(2)
receiver_device(text="Start chat").click()
time.sleep(2)
receiver_device(text="Shubham").click()
time.sleep(2)
receiver_device("com.google.android.apps.messaging:id/action_call").click()
time.sleep(5)
receiver_device(resourceId="com.google.android.dialer:id/incall_end_call").click()
time.sleep(2)
receiver_device(resourceId="com.android.systemui:id/back").click()
time.sleep(2)
receiver_device(resourceId="com.android.systemui:id/back").click()
print("Test case MSG_88 pass")

####################################################Testcase89################################################################

# Create a Device object
sender_device = ui2.Device(sender_device_serial)

# ADB command to retrieve battery information
adb_command = ['adb', '-s', receiver_device_serial, 'shell', 'dumpsys', 'battery']

# Execute the ADB command and capture the output
result = subprocess.run(adb_command, capture_output=True, text=True)

# Create a Device object for the sender device
sender_device = ui2.Device('cf611ff9')

# Create a Device object for the receiver device
receiver_device = ui2.Device(receiver_device_serial)


# ADB commands to turn on the receiver and sender devices' screens
receiver_turn_on_command = ['adb', '-s', receiver_device_serial, 'shell', 'input', 'keyevent', '224']
sender_turn_on_command = ['adb', '-s', 'cf611ff9', 'shell', 'input', 'keyevent', '224']

# ADB commands to turn off the receiver and sender devices' screens
receiver_turn_off_command = ['adb', '-s', receiver_device_serial, 'shell', 'input', 'keyevent', '26']
sender_turn_off_command = ['adb', '-s', 'cf611ff9', 'shell', 'input', 'keyevent', '26']

# Compose the message
receiver_device(text="Messages").click()
time.sleep(2)
receiver_device(text="Start chat").click()
time.sleep(2)
receiver_device(text="Shubham").click()
time.sleep(2)
receiver_device(resourceId="com.google.android.apps.messaging:id/action_call").click()
time.sleep(10)
receiver_device(resourceId="com.google.android.dialer:id/incall_end_call").click()
time.sleep(2)
receiver_device(resourceId="com.android.systemui:id/back").click()
time.sleep(2)

print("Test case MFG_89 pass")
